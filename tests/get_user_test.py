from uuid import UUID

# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

from src.user.model import Users
from src.user.schemes import User
from src.user.service import get_user


class TestGetUser:

    #  Tests that the function returns a User object when given a valid username
    def test_returns_user_object_when_given_valid_username(self, mocker):
        # Arrange
        db = mocker.Mock()
        username = "valid_username"
        email = 'admin@example.com'
        user_id = UUID('9eb1122b-118c-4e0d-af4f-85016e1a614d')
        hashed_password = '$2b$12$hTUCr5QohGEae87yAOYH3.4z1f6SZALm5EHfQvIDfk/vHi9E7q0xS'
        is_active = True
        user = Users(
            username=username,
            email=email,
            user_id=user_id,
            hashed_password=hashed_password,
            is_active=is_active
        )

        db.query.return_value.filter.return_value.first.return_value = user

        # Act
        result = get_user(db, username)

        # Assert
        assert isinstance(result, User)

    #  Tests that the function returns None when given an invalid username
    def test_returns_none_when_given_invalid_username(self, mocker):
        # Arrange
        db = mocker.Mock()
        username = "invalid_username"
        db.query.return_value.filter.return_value.first.return_value = None

        # Act
        result = get_user(db, username)

        # Assert
        assert result is None

    #  Tests that the function returns None when given an empty string as username
    def test_returns_none_when_given_empty_string_as_username(self, mocker):
        # Arrange
        db = mocker.Mock()
        username = ""
        db.query.return_value.filter.return_value.first.return_value = None

        # Act
        result = get_user(db, username)

        # Assert
        assert result is None

    #  Tests that the function returns None when no user with the given username is found in the database
    def test_returns_none_when_no_user_with_given_username_is_found(self, mocker):
        # Arrange
        db = mocker.Mock()
        username = "nonexistent_username"
        db.query.return_value.filter.return_value.first.return_value = None

        # Act
        result = get_user(db, username)

        # Assert
        assert result is None

    #  Tests that the function returns None when given a username with leading/trailing whitespaces
    def test_returns_none_when_given_username_with_leading_trailing_whitespaces(self, mocker):
        # Arrange
        db = mocker.Mock()
        username = "  username_with_whitespaces  "
        db.query.return_value.filter.return_value.first.return_value = None

        # Act
        result = get_user(db, username)

        # Assert
        assert result is None
